#!/usr/bin/env bash

#
#  _           _        _ _  __           _
# (_)_ __  ___| |_ __ _| | |/ _| ___  ___| |_
# | | '_ \/ __| __/ _` | | | |_ / _ \/ __| __|
# | | | | \__ \ || (_| | | |  _|  __/\__ \ |_
# |_|_| |_|___/\__\__,_|_|_|_|  \___||___/\__|
#
# Installation, Setup and Dotfile Creation Script
# for Students of General Assemb.ly's WDI Program

# Authors: Phillip Lamplugh, GA Instructor (2014),
#          PJ Hughes, GA Instructor (2014 & 2015)

# Resources:
#
# https://github.com/thoughtbot/laptop
# https://github.com/toranb/ubuntu-development-machine
# https://github.com/divio/osx-bootstrap
# https://github.com/paulirish/dotfiles
# https://github.com/mathiasbynens/dotfiles/
# https://github.com/ndbroadbent/dotfiles

# References:
#
# http://www.sudo.ws/
# http://www.gnu.org/software/bash/manual/bashref.html
# http://www.shellcheck.net
# http://explainshell.com/

#-------------------------------------------------------------------------------
# Set text formatting (utils/define_terminal_colors.sh)
#-------------------------------------------------------------------------------

# set 256 color profile where possible
if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

# Reset formatting
RESET=$(      tput sgr0)

# Foreground color
BLACK=$(      tput setaf 0)
RED=$(        tput setaf 1)
GREEN=$(      tput setaf 2)
YELLOW=$(     tput setaf 3)
BLUE=$(       tput setaf 4)
MAGENTA=$(    tput setaf 5)
CYAN=$(       tput setaf 6)
WHITE=$(      tput setaf 9)

# Background color
BG_BLACK=$(   tput setab 0)
BG_RED=$(     tput setab 1)
BG_GREEN=$(   tput setab 2)
BG_YELLOW=$(  tput setab 3)
BG_BLUE=$(    tput setab 4)
BG_MAGENTA=$( tput setab 5)
BG_CYAN=$(    tput setab 6)
BG_WHITE=$(   tput setab 9)

# Style
UNDERLINE=$(  tput smul)
NOUNDERLINE=$(tput rmul)
BOLD=$(       tput bold)
ITALIC=$(     tput sitm)

#-------------------------------------------------------------------------------
# Handle Command Line Options (utils/handle_options_and_start_logging.sh)
#-------------------------------------------------------------------------------

while getopts "vf" FLAG; do
  case $FLAG in
    f ) FORCE=true;;
    v ) VERBOSE=true;;
    ? ) exit 2;;
  esac
done

#-------------------------------------------------------------------------------
# Logging (utils/handle_options_and_start_logging.sh)
#-------------------------------------------------------------------------------

# set up logfile
LOGFOLDER="$HOME/.wdi"; mkdir -p $LOGFOLDER
LOGFILE="$LOGFOLDER/install.log"

# if we are logging verbosely
#   echo_log() & assert_that() -> stderr -> stdout -> *logfile* -> console
# else we are only logging assertions ([- n "$verbose" ] == false)
#   echo_log() & assert_that() -> stderr -> *logfile* -> stdout -> console
# this is done by:
#   a. directing echo_log() & assert_that() to stderr, via
#      {echo "" >&2}, and ...
echo_log() {
  echo "$1" >&2
}

if [ -n "$VERBOSE" ]; then
#     b. executing the script so that stdout 'tee's to logfile, via
#        {exec 1> >(tee logfile)} | {exec > >(tee logfile)}
#     c. executing the script so that stderr redirects to stdout, via
#        {exec 2>&1}
  exec > >(tee $LOGFILE); exec 2>&1
else
#     b. executing the script so that stderr 'tee's to logfile, via
#        {exec 2> >(tee logfile)}
  exec 2> >(tee $LOGFILE)
fi

echo_log
echo_log "Script execution begun: $(date)"
if [ -n "$FORCE" ]; then
  echo_log " Force option set to true: will continue script despite failed assertions."
else
  echo_log " Script will exit on failed assertions. Use -f option to force completion."
fi

if [ -n "$VERBOSE" ]; then
  echo_log " Verbose logging option set to true: will log all output, not just errors, log statements and assertions."
else
  echo_log " Script will log errors, log statements and assertions only. Use -v option to log verbosely."
fi
echo_log

# utils/screen_logging.sh

function inform () {
  echo ""
  echo "${BG_GREEN}>>>>    $* ${RESET}"
}

function warn () {
  # echo ""
  echo "${BG_WHITE}${RED}>>>>    $* ${RESET}"
}

function pause_awhile () {
  echo ""
  read -p "${BG_YELLOW}>>>>    $*. Press <Enter> to continue.${RESET}"
}

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

# Allow apps to control your computer
allow_control() {
  if [[ "$OSTYPE" =~ ^darwin13.*$ ]]; then
    for app; do
      APP_ID="$(osascript -e "id of app \"$app\"")"
      if [[ -n "$APP_ID" ]]; then
        sudo sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db "INSERT or REPLACE INTO access values ('kTCCServiceAccessibility', '$APP_ID', 0, 1, 0, NULL);"
      fi
    done
  else
    warn "allow_control works only on Mavericks or newer..."
  fi
}

#-------------------------------------------------------------------------------
# Set up basic env vars (utils/set_env_vars.sh)
#-------------------------------------------------------------------------------

# Standard Bash Variables
# `OSTYPE` A string describing the operating system Bash is running on.
# `MACHTYPE` system type in cpu-company-system
# `SECONDS` number of seconds since the shell was started.

# FIXME (PJ) should have a better place to decide these versions:
#   Ruby (rbenv), Python (pyenv), Node (nvm)
BELOVED_RUBY_VERSION="2.2.3"
CURRENT_STABLE_RUBY_VERSION="2.2.3"

# TODO (pj) decide what the python versions should really be...
#   and maybe come up with a bigger, better place to hang this info
BELOVED_PYTHON_VERSION="anaconda-2.0.1"
CURRENT_STABLE_PYTHON_VERSION="3.4.1"

if [[ "$OSTYPE" == "darwin"* ]]; then
  SYSTEM="mac"
  BASH_FILE=".bash_profile"
else
  SYSTEM="ubuntu"
  BASH_FILE=".bashrc"
fi

SRC_DIR=~/.wdi/installfest

# Deprecated as part of the utils/report_log.sh system...
# TODO (PJ) update how reporting is done?
# OWNER="ga-students"
# REPO="wdi_melville_instructors"

MINIMUM_OS="10.7.0"

#-------------------------------------------------------------------------------
# We Begin! (utils/screen_instructions.sh)
#-------------------------------------------------------------------------------

clear

echo "Welcome to Installfest

Throughout the script you will be asked to enter your password. Unless otherwise
stated, this is asking for your ${BOLD}computer's password${RESET}.

This will install or update files and applications that you will use in class."
echo ""

# utils/capture_password.sh

# capture the user's password
sudo -p "${BG_GREEN}Enter your computer's password \
  so that we can make the necessary changes: ${RESET}" echo "Thank you."

echo ""

# Determine OS version
os_version=$(sw_vers -productVersion)

# Check for recommended software updates
sudo softwareupdate -i -r --ignore iTunes


# mac/install_commandline_tools.sh

# Check that command line tools are installed
case $os_version in
  *10.11*) cmdline_version="CLTools_Executables" ;; # El Capitan
  *10.10*) cmdline_version="CLTools_Executables" ;; # Yosemite
  *10.9*)  cmdline_version="CLTools_Executables" ;; # Mavericks
  *10.8*)  cmdline_version="DeveloperToolsCLI"   ;; # Mountain Lion
  *10.7*)  cmdline_version="DeveloperToolsCLI"   ;; # Lion
  *10.6*)  cmdline_version="DeveloperToolsCLILeo"
           warn "Outdated OS. Considering upgrading before continuing.";; # Snow Leopard
           # Force the user to upgrade if they're below 10.6
  *) warn "Sorry! You'll have to upgrade your OS to $MINIMUM_OS or above."; exit 1;;
esac

# Check for Command Line Tools based on OS versions
if [ ! -z $(pkgutil --pkgs=com.apple.pkg.$cmdline_version) ]; then
  inform "Command Line Tools are installed!";
elif [[ $os_version == *10.6** ]]; then
  warn "Command Line Tools are not installed!"
  warn "  Downloading and installing the GCC compiler."
  warn "  When you're done rerun this script..."
  curl -OLk https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.6.pkg
  open GCC-10.6.pkg
  exit 1
elif [[ $os_version == *10.7* ]] || [[ $os_version == *10.8* ]]; then
  warn "Command Line Tools are not installed!"
  warn "Register for a Developer Account"
  warn "  Download the Command Lion Tools from:"
  warn "    https://developer.apple.com/downloads/index.action"
  warn "  and then rerun this script..."
  exit 1
else
  warn "Command Line Tools are not installed!"
  warn "  Running 'xcode-select --install' Please click continue!"
  warn "  After installing please rerun this script."
  xcode-select --install
  exit 1
fi

# Ensure user has full control over their folder
sudo chown -R ${USER} ~

# Repair disk permission
diskutil repairPermissions /
# uninstall rvm, so that we can use rbenv
# http://stackoverflow.com/questions/3950260/howto-uninstall-rvm
if hash rvm 2>/dev/null || [ -d ~/.rvm ]; then
  yes | rvm implode
  rm -rf ~/.rvm
fi

assert_that "RVM has been removed or was not installed" "command -v rvm" ""

# Because we're going to use rbenv and homebrew we need to remove RVM and MacPorts
# This script checks for and removes previous installs of macports and RVM

# Uninstall Macports
# http://guide.macports.org/chunked/installing.macports.uninstalling.html
if hash port 2>/dev/null || [[ $(find /opt/local -iname macports 2>/dev/null) ]]; then
  echo "Removing MacPorts"
    macports=$(find /opt/local -iname macports)
    for f in $macports; do
      rm -rf $f
    done
  # carthago delenda est
  sudo port -fp uninstall installed
  sudo rm -rf \
    /opt/local \
    /Applications/DarwinPorts \
    /Applications/MacPorts \
    /Library/LaunchDaemons/org.macports.* \
    /Library/Receipts/DarwinPorts*.pkg \
    /Library/Receipts/MacPorts*.pkg \
    /Library/StartupItems/DarwinPortsStartup \
    /Library/Tcl/darwinports1.0 \
    /Library/Tcl/macports1.0 \
    ~/.macports
    sudo find / | grep macports | sudo xargs rm
else
  echo "Macports is not installed. Moving on..."
fi

echo "Please register for an account on github.com if you haven't already done so."

read -p "Enter your First Name: "    fname
read -p "Enter your Last Name: "     lname
read -p "Github Username: "          github_name
read -p "Github Email: "             github_email
read -s -p "Github Password: "       github_password

# SSH keys establish a secure connection between your computer and GitHub
# This script follows these instructions
# `https://help.github.com/articles/generating-ssh-keys`

# SSH Keygen
pause_awhile "Generating an SSH key to establish a secure connection between\
  your computer and GitHub. When you see the prompts\
  'Enter a file in which to save the key', or\
  'Enter passphrase (empty for no passphrase)',\
  just press Enter!"

ssh-keygen -t rsa -C $github_email
ssh-add id_rsa

public_key=$(cat ~/.ssh/id_rsa.pub)

# Upload to github
curl https://api.github.com/user/keys \
  -H "User-Agent: WDIInstallFest" \
  -H "Accept: application/vnd.github.v3+json" \
  -u "$github_name:$github_password" \
  -d '{"title":"WDI Installfest", "key":"'"$public_key"'"}'

# TODO (h4w5) add assertion around ... "ssh -T git@github.com"

# ------------------------------------------------------------------------------
# Clone the script repo locally in order to copy dotfiles etc. directly from it.
# (clone_script_repo.sh)
# ------------------------------------------------------------------------------

# TODO (PJ) this needs to be more robust, BY FAR!
SETTINGS=$SRC_DIR/settings
INSTALL_REPO=https://github.com/GA-WDI/installfest_script.git
BRANCH=dtla-06

pause_awhile "Downloading the Installfest repo..."
# download the repo for the absolute paths

if [[ $os_version == *10.6** ]]; then
  # 10.6 doesn't have git so download the zip and rename it installfest
  curl -LO https://github.com/ga-instructors/installfest_script/archive/$BRANCH.zip
  unzip $BRANCH.zip -d ~/.wdi
  mv ~/.wdi/installfest_script-$BRANCH/ ~/.wdi/installfest
else
  if [[ ! -d $SRC_DIR ]]; then
    echo 'Downloading Installfest repo...'
    # autoupdate bootstrap file
    git clone -b $BRANCH $INSTALL_REPO $SRC_DIR
  else
    # update repo
    echo 'Updating repo...'
    cd $SRC_DIR
    git pull origin $BRANCH
  fi
fi

#-------------------------------------------------------------------------------
# Install Homebrew (mac/install_homebrew.sh)
#-------------------------------------------------------------------------------

# Set up ownership for /usr/local to anyone with admin permissions!
sudo chgrp -R admin /usr/local
sudo chmod -R g+w /usr/local

# Installs Homebrew, our package manager
# http://brew.sh/

$(which -s brew)
if [[ $? != 0 ]]; then
  echo 'Installing Homebrew...'
  # piping echo to simulate hitting return in the brew install script
  echo | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# Set up ownership for /usr/local to anyone with admin permissions!
sudo chgrp -R admin /Library/Caches/Homebrew
sudo chmod -R g+w /Library/Caches/Homebrew

# Make sure we're using the latest Homebrew
brew update

# Version Control
brew install git

# additional git commands
brew install hub


# Upgrade any already-installed formulae
brew upgrade

# These formulae duplicate software provided by OS X
# though may provide more recent or bugfix versions.
brew tap homebrew/dupes

packagelist=(
  # Autoconf is an extensible package of M4 macros that produce shell scripts to
  # automatically configure software source code packages.
  autoconf

  # Automake is a tool for automatically generating Makefile.in
  automake

  # generic library support script
  libtool

  # a YAML 1.1 parser and emitter
  libyaml

  # neon is an HTTP and WebDAV client library
  # neon

  # A toolkit implementing SSL v2/v3 and TLS protocols with full-strength
  # cryptography world-wide.
  openssl

  # pkg-config is a helper tool used when compiling applications and libraries.
  pkg-config

  # a script that uses ssh to log into a remote machine
  ssh-copy-id

  # XML C parser and toolkit
  libxml2

  # a language for transforming XML documents into other XML documents.
  libxslt

  # a conversion library between Unicode and traditional encoding
  libiconv

  # generates an index file of names found in source files of various programming
  # languages.
  ctags

  # Adds history for node repl
  readline

)

brew install ${packagelist[@]}

# Tap a new formula repository from GitHub, or list existing taps.
brew tap homebrew/versions

# Ensures all tapped formula are symlinked into Library/Formula
# and prunes dead formula from Library/Formula.
brew tap --repair

# Remove outdated versions from the cellar
brew cleanup

git_completion_url=https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash

curl -o ~/.git-completion.bash $git_completion_url

# Add user's github info to gitconfig
# https://www.kernel.org/pub/software/scm/git/docs/git-config.html
git config --global user.name    "$fname $lname"
git config --global user.github  $github_name
git config --global user.email   $github_email

# set colors
git config --global color.ui always

git config --global color.branch.current   "green reverse"
git config --global color.branch.local     green
git config --global color.branch.remote    yellow

git config --global color.status.added     green
git config --global color.status.changed   yellow
git config --global color.status.untracked red

# set editor
# change to `subl -w` if you want to open merge messages in Sublime.
git config --global core.editor "nano"

# default branch to push to
git config --global push.default current

# set global gitignore
git config --global core.excludesfile ~/.gitignore_global

# add some useful shortcuts
git config --global alias.sha 'rev-parse HEAD'
git config --global alias.last 'log -1 HEAD --oneline --decorate'
git config --global alias.ll 'log --oneline --decorate'
git config --global alias.set-master 'branch --set-upstream-to=origin/master master'
git config --global alias.back 'reset --soft HEAD~1'
git config --global alias.again 'commit -c ORIG_HEAD'
git config --global alias.deploy 'subtree push --prefix dist/ origin gh-pages'
# Our Ruby version manager
# brew install rbenv
git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

# Use homebrew's directories instead of rbenv's
# echo 'export RBENV_ROOT=/usr/local/var/rbenv' >> ~/.bash_profile
# export RBENV_ROOT="/usr/local/var/rbenv"

# Add to bash_profile
echo '# added by installfest script' >> ~/.bash_profile
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
echo 'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' >> ~/.bash_profile

# enable shims and autocompletion
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# brew install rbenv-gem-rehash
git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash

# Automatically install gems every time you install a new version of Ruby
# brew install rbenv-default-gems
git clone https://github.com/sstephenson/rbenv-default-gems.git ~/.rbenv/plugins/rbenv-default-gems

# # Provides an `rbenv install` command
# # ruby-build is a dependency of rbenv-default-gems, so it gets installed
# brew install ruby-build
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

# rbenv rehash
# source ~/.bash_profile

# Our gems to install
# skip documentation
echo "gem: --no-ri --no-rdoc" > ~/.gemrc

# TODO (phlco) replace ~/.rbenv with $RBENV_ROOT
touch ~/.rbenv/default-gems

gemlist=(
  bundler         # Maintains a consistent environment for ruby applications.
  # capybara        # Acceptance test framework for web applications
  # guard           # handle events on file system modifications
  # jasmine         # JavaScript testing
  pry             # alternative to the standard IRB shell
  # pry-coolline    # live syntax highlighting for the Pry REPL
  # rails           # full stack, Web application framework
  # rspec           # testing tool for Ruby
  # sinatra         # a DSL for quickly creating web applications in Ruby
  # sinatra-contrib # common Sinatra extensions
  github_api      # Ruby interface to github API v3
  # hipchat         # HipChat HTTP API Wrapper
  awesome_print   # pretty print your Ruby objects with style
  rainbow         # colorizing printed text on ANSI terminals
)

for gem in ${gemlist[@]}; do
  echo "${gem}" >> ~/.rbenv/default-gems
done

ruby_check=$(rbenv versions | grep $BELOVED_RUBY_VERSION)

if [[ "$ruby_check" == *$BELOVED_RUBY_VERSION* ]]; then
  echo "$BELOVED_RUBY_VERSION is installed"
else
  rbenv install $BELOVED_RUBY_VERSION
fi

assert_that "Ruby is installed and links to rbenv" "which ruby" "$HOME/.rbenv/shims/ruby"

rbenv global $BELOVED_RUBY_VERSION
rbenv rehash

# assert_that "Ruby version is now '${BELOVED_RUBY_VERSION}'" \
#             "ruby -v | grep -q ${BELOVED_RUBY_VERSION} && echo 'true'" "true"

# Remove any brew installation
brew remove --force node
sudo rm -r /usr/local/lib/node_modules

# install Node Version Manager
git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`

# load nvm command
source ~/.nvm/nvm.sh

# Install and use the latest version of Node
nvm install stable
nvm use stable

# Ensure we have the most recent version of npm
npm install npm -g

# a CLI workflow for the administration of Mac applications
# distributed as binaries
brew tap phinze/homebrew-cask
brew install brew-cask

brew tap caskroom/versions

# The Browser
brew cask install google-chrome
# brew cask install google-chrome-canary

# A Browser
brew cask install firefox
# brew cask install firefox-nightly

# The Text Editor, Sublime Text 2
# (phlco) sublime text 3 is still in beta, therefore we'll stick to stable.
# (phlco) atom won't support files over 2mb therefore we'll hold off.
# brew cask install sublime-text

# PJ: fuck it, v3
brew cask install sublime-text3

# Flux, makes the color of your computer's display adapt to the time of day
# brew cask install flux

# Alternative Terminal
# brew cask install iterm2

# for fonts
# https://github.com/caskroom/homebrew-fonts/tree/master/Casks
# brew tap caskroom/fonts
#
# brew cask install font-source-code-pro
# brew cask install font-source-sans-pro
# brew cask install font-inconsolata

# Git extensions to provide high-level repository operations
# brew install git-flow
if [[ $os_version == *10.6** ]]; then
  # spectacle
  curl -OL https://s3.amazonaws.com/spectacle/downloads/Spectacle+0.7.zip
  unzip Spectacle+0.7.zip
  mv Spectacle.app/ /Applications
  rm Spectacle+0.7.zip

  echo "Slack requires 10.7 or higher. Please bookmark and use the browser version."

 else
  # The Window Manager
  brew cask install spectacle
  # allow_control Spectacle NOTE (phlco) just set up by hand?

  # Our class chat client
  brew cask install slack

  # The X Window Server
  brew cask install xquartz
fi

# Useful packages
packagelist=(
  # ASCII ART!!!!
  figlet

  # visualization tool for ERDs
  graphviz

  # image resizing
  imagemagick

  # PhantomJS is a headless WebKit scriptable with a JavaScript API.
  phantomjs

  # WebKit implementation of qt for Capybara testing
  qt

  # qt for mavericks
  qt4

  # Advanced in-memory key-value store that persists on disk
  redis

  # essential UNIX commands
  # TODO (phlco) ensure they're aliased in the path correctly
  coreutils

  # a self-contained, serverless, zero-configuration, transactional SQL database
  # engine.
  sqlite
)

brew install ${packagelist[@]}

# List of useful Quick Look plugins for developers
# NOTE (phlco) necessary?
# brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlprettypatch quicklook-csv betterzipql webp-quicklook suspicious-package

# Set up Postgres
brew install postgresql

# Install ruby interface for Postgres
# from brew: "When installing the postgres gem, including ARCHFLAGS is
# recommended:"
ARCHFLAGS="-arch x86_64" gem install pg

# Create a database
initdb /usr/local/var/postgres -E utf8

# NOTE! https://coderwall.com/p/rjioeg
# Yosemite problems:
# for some reasons yosemite cleaned up some files/directories in /usr/local
# for postgres installed via homebrew the following directories were missing to
# start postgres properly:
sudo mkdir -p /usr/local/var/postgres/{pg_tblspc,pg_twophase,pg_stat_tmp}
# May also need this.
sudo chmod -R 0700 /usr/local/var/postgres
sudo chown -R ${USER} /usr/local/var/postgres

# Ensure that Postgres launches whenever we login
mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/postgresql/9.*/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/

# Start Postgres now
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist

# give postgres time to load
sleep 5s

# create db matching user name so we can log in by just typing psql
createdb ${USER}

# # Disable the "Are you sure you want to open this application?" dialog
# defaults write com.apple.LaunchServices LSQuarantine -bool false

# # Reveal IP address, hostname, OS version, etc. when clicking the clock
# # in the login window
# sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# # Disable the warning when changing a file extension
# defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# # Only use UTF-8 in Terminal.app
# defaults write com.apple.terminal StringEncodings -array 4

# # Use a modified version of the Pro theme by default in Terminal.app
# open "${HOME}/init/Mathias.terminal"
# sleep 1 # Wait a bit to make sure the theme is loaded
# defaults write com.apple.terminal "Default Window Settings" -string "Mathias"
# defaults write com.apple.terminal "Startup Window Settings" -string "Mathias"

# # Install Sublime Text settings
# cp -r init/Preferences.sublime-settings ~/Library/Application\ Support/Sublime\ Text*/Packages/User/Preferences.sublime-settings 2> /dev/null

# spectacle
# http://support.apple.com/kb/HT5914
# codesign -s - --resource-rules=/Users/YourUserNameHere/ResourceRules-ignoring-Scripts.plist /path/to/applet.app

# https://github.com/chytreg/dotfiles/blob/c532970fb63a78b2507141b4de26b3c8e25c2bfc/bin/bootstrap

# also look into brew cask for installing applications
# https://github.com/Homebrew/homebrew/wiki/External-Commands

####################################################################################
# Download and set Terminal colors to MyMonokai
####################################################################################
# TODO(phlco): Make these open in the background

# Only use UTF-8 in Terminal.app
defaults write com.apple.terminal StringEncodings -array 4

# echo "Settings MyMonokai for Terminal..."
# open -g "${HOME}/.wdi-installfest/settings/sublime/MyMonokai.terminal"
# echo "done"

# osascript -e 'tell application "Terminal" to activate' \
# -e 'tell application "System Events" to tell process "Terminal" to keystroke "t" using command down' \
# -e 'tell application "Terminal" to do script "open ~/.wdi-installfest/settings/sublime/MyMonokai.terminal" in tab 2 of front window'
# -e 'tell application "System Events" to tell process "Terminal" to keystroke "w" using command down'
# -e 'tell application "System Events" to tell process "Terminal" to tell window 1 to close'

# create_student_folders.sh

inform "Creating directory for wdi: ~/code/wdi"

STUDENT_FOLDER="$HOME/code/wdi"
mkdir -p $STUDENT_FOLDER

SRC_DIR=~/.wdi/installfest
SETTINGS=$SRC_DIR/settings

dotfiles=($SETTINGS/dotfiles/*)

timestamp=$(date +%s)

mkdir -p $HOME/.wdi/backups_$timestamp

for filepath in "${dotfiles[@]}"; do

  dotfile=".$(basename $filepath)"

  if [[ -a "$HOME/$dotfile" ]]; then

    cp "$HOME/$dotfile" "$HOME/.wdi/backups_$timestamp/$dotfile"

  fi

  cp $filepath "$HOME/$dotfile"
done

# SRC_DIR=~/.wdi/installfest
# SETTINGS=$SRC_DIR/settings

THEMES_DIR=($SETTINGS/terminal)

cp "$THEMES_DIR/Tomorrow Night.terminal" ~/Desktop
#-------------------------------------------------------------------------------
# We're done! (utils/fin.sh)
#-------------------------------------------------------------------------------

inform "We're done!"

echo ""
echo "Please quit and re-open your terminal!"
echo "#-- fin -- #"

# TODO(phlco) maybe make the welcome prompt load up additional checks to run.

