#!/usr/bin/env bash

#
#  _           _        _ _  __           _
# (_)_ __  ___| |_ __ _| | |/ _| ___  ___| |_
# | | '_ \/ __| __/ _` | | | |_ / _ \/ __| __|
# | | | | \__ \ || (_| | | |  _|  __/\__ \ |_
# |_|_| |_|___/\__\__,_|_|_|_|  \___||___/\__|
#
# Installation, Setup and Dotfile Creation Script
# for Students of General Assemb.ly's WDI Program

# Authors: Phillip Lamplugh, GA Instructor (2014),
#          PJ Hughes, GA Instructor (2014 & 2015)

# Resources:
#
# https://github.com/thoughtbot/laptop
# https://github.com/toranb/ubuntu-development-machine
# https://github.com/divio/osx-bootstrap
# https://github.com/paulirish/dotfiles
# https://github.com/mathiasbynens/dotfiles/
# https://github.com/ndbroadbent/dotfiles

# References:
#
# http://www.sudo.ws/
# http://www.gnu.org/software/bash/manual/bashref.html
# http://www.shellcheck.net
# http://explainshell.com/

#-------------------------------------------------------------------------------
# Set text formatting (utils/define_terminal_colors.sh)
#-------------------------------------------------------------------------------

# set 256 color profile where possible
if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

# Reset formatting
RESET=$(      tput sgr0)

# Foreground color
BLACK=$(      tput setaf 0)
RED=$(        tput setaf 1)
GREEN=$(      tput setaf 2)
YELLOW=$(     tput setaf 3)
BLUE=$(       tput setaf 4)
MAGENTA=$(    tput setaf 5)
CYAN=$(       tput setaf 6)
WHITE=$(      tput setaf 7)

# Background color
BG_BLACK=$(   tput setab 0)
BG_RED=$(     tput setab 1)
BG_GREEN=$(   tput setab 2)
BG_YELLOW=$(  tput setab 3)
BG_BLUE=$(    tput setab 4)
BG_MAGENTA=$( tput setab 5)
BG_CYAN=$(    tput setab 6)
BG_WHITE=$(   tput setab 7)

# Style
UNDERLINE=$(  tput smul)
NOUNDERLINE=$(tput rmul)
BOLD=$(       tput bold)
ITALIC=$(     tput sitm)

#-------------------------------------------------------------------------------
# Handle Command Line Options (utils/handle_options_and_start_logging.sh)
#-------------------------------------------------------------------------------

while getopts "vf" FLAG; do
  case $FLAG in
    f ) FORCE=true;;
    v ) VERBOSE=true;;
    ? ) exit 2;;
  esac
done

#-------------------------------------------------------------------------------
# Logging (utils/handle_options_and_start_logging.sh)
#-------------------------------------------------------------------------------

# set up logfile
LOGFOLDER="$HOME/.wdi"; mkdir -p $LOGFOLDER
LOGFILE="$LOGFOLDER/install.log"

# if we are logging verbosely
#   echo_log() & assert_that() -> stderr -> stdout -> *logfile* -> console
# else we are only logging assertions ([- n "$verbose" ] == false)
#   echo_log() & assert_that() -> stderr -> *logfile* -> stdout -> console
# this is done by:
#   a. directing echo_log() & assert_that() to stderr, via
#      {echo "" >&2}, and ...
echo_log() {
  echo "$1" >&2
}

if [ -n "$VERBOSE" ]; then
#     b. executing the script so that stdout 'tee's to logfile, via
#        {exec 1> >(tee logfile)} | {exec > >(tee logfile)}
#     c. executing the script so that stderr redirects to stdout, via
#        {exec 2>&1}
  exec > >(tee $LOGFILE); exec 2>&1
else
#     b. executing the script so that stderr 'tee's to logfile, via
#        {exec 2> >(tee logfile)}
  exec 2> >(tee $LOGFILE)
fi

echo_log
echo_log "Script execution begun: $(date)"
if [ -n "$FORCE" ]; then
  echo_log " Force option set to true: will continue script despite failed assertions."
else
  echo_log " Script will exit on failed assertions. Use -f option to force completion."
fi

if [ -n "$VERBOSE" ]; then
  echo_log " Verbose logging option set to true: will log all output, not just errors, log statements and assertions."
else
  echo_log " Script will log errors, log statements and assertions only. Use -v option to log verbosely."
fi
echo_log

# utils/screen_logging.sh

function inform () {
  echo ""
  echo "${BG_GREEN}${WHITE}>>>>    $* ${RESET}"
}

function warn () {
  # echo ""
  echo "${BG_RED}${WHITE}>>>>    $* ${RESET}"
}

function pause_awhile () {
  echo ""
  read -p "${BG_YELLOW}${WHITE}>>>>    $*. Press <Enter> to continue.${RESET}"
}

#-------------------------------------------------------------------------------
# Set up basic env vars (utils/set_env_vars.sh)
#-------------------------------------------------------------------------------

# Standard Bash Variables
# `OSTYPE` A string describing the operating system Bash is running on.
# `MACHTYPE` system type in cpu-company-system
# `SECONDS` number of seconds since the shell was started.

# FIXME (PJ) should have a better place to decide these versions:
#   Ruby (rbenv), Python (pyenv), Node (nvm)
BELOVED_RUBY_VERSION="2.2.3"
CURRENT_STABLE_RUBY_VERSION="2.2.3"

# TODO (pj) decide what the python versions should really be...
#   and maybe come up with a bigger, better place to hang this info
BELOVED_PYTHON_VERSION="anaconda-2.0.1"
CURRENT_STABLE_PYTHON_VERSION="3.4.1"

if [[ "$OSTYPE" == "darwin"* ]]; then
  SYSTEM="mac"
  BASH_FILE=".bash_profile"
else
  SYSTEM="ubuntu"
  BASH_FILE=".bashrc"
fi

SRC_DIR=~/.wdi/installfest

# Deprecated as part of the utils/report_log.sh system...
# TODO (PJ) update how reporting is done?
# OWNER="ga-students"
# REPO="wdi_melville_instructors"

MINIMUM_MAC_OS="10.7.0"

#-------------------------------------------------------------------------------
# We Begin! (utils/screen_instructions.sh)
#-------------------------------------------------------------------------------

clear

echo "Welcome to Installfest

Throughout the script you will be asked to enter your password. Unless otherwise
stated, this is asking for your ${BOLD}computer's password${RESET}.

This will install or update files and applications that you will use in class."
echo ""

# utils/capture_password.sh

# capture the user's password
sudo -p "${BG_GREEN}Enter your computer's password\
  so that we can make the necessary changes.\
  The password will not be visible as yout type: ${RESET}" echo "Thank you."

echo ""

# TODO (phlco) remove the description part with a regex capture group
os_version=$(lsb_release -a | grep -i Description)

#-------------------------------------------------------------------------------
# Check for software updates
#-------------------------------------------------------------------------------

sudo apt-get -y update
sudo apt-get -y upgrade
sudo apt-get -y dist-upgrade

packagelist=(
  # Autoconf is an extensible package of M4 macros that produce shell scripts
  # to automatically configure software source code packages.
  autoconf

  # Automake is a tool for automatically generating Makefile.in
  automake

  # general-purpose parser generator that converts an annotated context-free
  # grammar into an LALR or GLR parser for that grammar.
  bison

  # generic library support script
  libtool

  # a YAML 1.1 parser and emitter
  libyaml-dev

  # provides a set of functions for use by applications that allow users to
  # edit command lines as they are typed in
  libreadline6
  libreadline6-dev
  libreadline-dev

  # XML C parser and toolkit
  libxml2-dev

  # a language for transforming XML documents into other XML documents.
  libxslt1-dev

  # gnome-keyring is a daemon in the session, similar to ssh-agent,
  # and other applications can use it to store passwords and other
  # sensitive information
  # atom dependency?
  libgnome-keyring-dev

  # OpenSSL implementation of SSL
  libssl-dev
  libcurl4-openssl-dev

  # version control
  git
  git-core

  # copy to clipboard
  xclip

  # command line tool for transferring data with URL syntax
  curl

  # This software provides an abstraction of the used apt repositories.
  python-software-properties

  # a reference for all the packages needed to compile a debian package
  # generally includes the gcc/g++ compilers an libraries and some other utils
  build-essential

  # library implementing the deflate compression method found in gzip and PKZIP
  zlib1g-dev

  # generates an index file of names found in source files of various
  # programming languages.
  exuberant-ctags

  # Header files and static library for compiling C programs to link with the
  # libpq library in order to communicate with a PostgreSQL database backend.
  libpq-dev
  # or try
  # gem install pg  --   --with-pg-lib=/usr/lib

  # self-contained, serverless, transactional SQL database engine.
  sqlite3
  libsqlite3-dev

  # ASCII ART!!!!
  figlet

  # tree visualizer for filesystems
  tree

  # visualization tool for ERDs
  graphviz

  # image resizing
  imagemagick

  # headless WebKit scriptable with a JavaScript API.
  phantomjs
)

sudo apt-get -y install ${packagelist[@]}

assert_package_installed ${packagelist[@]}

inform "Enter information to set up your GitHub configurations."

echo "Please register for an account on github.com if you haven't already done so."
echo ""

read -p "Enter your First Name: "    fname
read -p "Enter your Last Name: "     lname
read -p "Github Username: "          github_name
read -p "Github Email: "             github_email
read -s -p "Github Password: "       github_password

echo ""

# SSH keys establish a secure connection between your computer and GitHub
# This script follows these instructions
# `https://help.github.com/articles/generating-ssh-keys`

# SSH Keygen
pause_awhile "Generating an SSH key to establish a secure connection between\
  your computer and GitHub. When you see the prompts\
  'Enter a file in which to save the key', or\
  'Enter passphrase (empty for no passphrase)',\
  just press Enter!"

ssh-keygen -t rsa -b 4096 -C $github_email
ssh-add ~/.ssh/id_rsa

public_key=$(cat ~/.ssh/id_rsa.pub)

# Upload to github
echo ""
echo "Uploading ssh key to GitHub..."

curl https://api.github.com/user/keys \
  -H "User-Agent: WDIInstallFest" \
  -H "Accept: application/vnd.github.v3+json" \
  -u "$github_name:$github_password" \
  -d '{"title":"WDI Installfest", "key":"'"$public_key"'"}'

# TODO (h4w5) add assertion around ... "ssh -T git@github.com"
echo ""

# Add user's github info to gitconfig
# https://www.kernel.org/pub/software/scm/git/docs/git-config.html
git config --global user.name    "$fname $lname"
git config --global user.github  $github_name
git config --global user.email   $github_email

# set colors
git config --global color.ui always

git config --global color.branch.current   "green reverse"
git config --global color.branch.local     green
git config --global color.branch.remote    yellow

git config --global color.status.added     green
git config --global color.status.changed   yellow
git config --global color.status.untracked red

# set editor
# change to `subl -w` if you want to open merge messages in Sublime.
git config --global core.editor "nano"

# default branch to push to
git config --global push.default current

# set global gitignore
git config --global core.excludesfile ~/.gitignore_global

# add commit template
git config --global commit.template ~/.gitmessage.txt

# add some useful shortcuts
git config --global alias.sha 'rev-parse HEAD'
git config --global alias.last 'log -1 HEAD --oneline --decorate'
git config --global alias.ll 'log --oneline --decorate'
git config --global alias.set-master 'branch --set-upstream-to=origin/master master'
git config --global alias.back 'reset --soft HEAD~1'
git config --global alias.again 'commit -c ORIG_HEAD'
git config --global alias.deploy 'subtree push --prefix dist/ origin gh-pages'

# ------------------------------------------------------------------------------
# Clone the script repo locally in order to copy dotfiles etc. directly from it.
# (clone_script_repo.sh)
# ------------------------------------------------------------------------------

# TODO (PJ) this needs to be more robust, BY FAR!
SETTINGS=$SRC_DIR/settings
INSTALL_REPO=https://github.com/GA-WDI/installfest_script.git
BRANCH=master

pause_awhile "Downloading the Installfest repo..."
# download the repo for the absolute paths

if [[ $os_version == *10.6** ]]; then
  # 10.6 doesn't have git so download the zip and rename it installfest
  curl -LO https://github.com/ga-instructors/installfest_script/archive/$BRANCH.zip
  unzip $BRANCH.zip -d ~/.wdi
  mv ~/.wdi/installfest_script-$BRANCH/ ~/.wdi/installfest
else
  if [[ ! -d $SRC_DIR ]]; then
    echo 'Downloading Installfest repo...'
    # autoupdate bootstrap file
    git clone -b $BRANCH $INSTALL_REPO $SRC_DIR
  else
    # update repo
    echo 'Updating repo...'
    cd $SRC_DIR
    git pull origin $BRANCH
  fi
fi

# Heroku command-line tooling for working with the Heroku platform

# http://eoinoc.net/install-hub-github-linux-mint/
# wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
# from the above, but using our current environment:

# add heroku repository to apt
sudo sh -c 'echo "deb http://toolbelt.heroku.com/ubuntu ./" > /etc/apt/sources.list.d/heroku.list'

# install heroku's release key for package verification
wget -O- https://toolbelt.heroku.com/apt/release.key | sudo apt-key add -

# update your sources with heroku packages
sudo apt-get update -y

# install the toolbelt
sudo apt-get install -y heroku-toolbelt

# https://devcenter.heroku.com/articles/keys
# FIXME pj@ga.co: not working as it is -- can't find `heroku`
# echo "Heroku is a cloud platform as a service (PaaS) supporting several"
# echo "programming languages."

# echo "If you don’t already use SSH, you’ll need to create a public/private key"
# echo "pair to deploy code to Heroku. This keypair is used for the strong"
# echo "cryptography and that uniquely identifies you as a developer when pushing"
# echo "code changes."

# ssh-keygen -t rsa

# echo "The first time you run the heroku command, you’ll be prompted for your "
# echo "credentials. Your public key will then be automatically uploaded to"
# echo "Heroku. This will allow you to deploy code to all of your apps."
# echo "Please enter your email"

# heroku keys:add

# uninstall rvm, so that we can use rbenv
# http://stackoverflow.com/questions/3950260/howto-uninstall-rvm
if hash rvm 2>/dev/null || [ -d ~/.rvm ]; then
  yes | rvm implode
  rm -rf ~/.rvm
fi

# assert_that "RVM has been removed or was not installed" "command -v rvm" ""

# Our Ruby version manager
# brew install rbenv
git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

# Use homebrew's directories instead of rbenv's
# echo 'export RBENV_ROOT=/usr/local/var/rbenv' >> ~/.bash_profile
# export RBENV_ROOT="/usr/local/var/rbenv"

# Add to bash_profile
# echo '# added by installfest script' >> ~/.bash_profile
# echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
# echo 'if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi' >> ~/.bash_profile

# enable shims and autocompletion
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# brew install rbenv-gem-rehash
git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash

# Automatically install gems every time you install a new version of Ruby
# brew install rbenv-default-gems
git clone https://github.com/sstephenson/rbenv-default-gems.git ~/.rbenv/plugins/rbenv-default-gems

# automatically runs rbenv rehash every time you install or uninstall a gem
git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash

# # Provides an `rbenv install` command
# # ruby-build is a dependency of rbenv-default-gems, so it gets installed
# brew install ruby-build
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

# rbenv rehash
# source ~/.bash_profile

# Our gems to install
# skip documentation
echo "gem: --no-ri --no-rdoc" > ~/.gemrc

# TODO (phlco) replace ~/.rbenv with $RBENV_ROOT
touch ~/.rbenv/default-gems

gemlist=(
  bundler         # Maintains a consistent environment for ruby applications.
  # capybara        # Acceptance test framework for web applications
  # guard           # handle events on file system modifications
  # jasmine         # JavaScript testing
  pry             # alternative to the standard IRB shell
  # pry-coolline    # live syntax highlighting for the Pry REPL
  # rails           # full stack, Web application framework
  # rspec           # testing tool for Ruby
  # sinatra         # a DSL for quickly creating web applications in Ruby
  # sinatra-contrib # common Sinatra extensions
  github_api      # Ruby interface to github API v3
  # hipchat         # HipChat HTTP API Wrapper
  awesome_print   # pretty print your Ruby objects with style
  rainbow         # colorizing printed text on ANSI terminals
)

for gem in ${gemlist[@]}; do
  echo "${gem}" >> ~/.rbenv/default-gems
done

# For testing and simplicity with Ubuntu, add these to the .bashrc until it's
# overwritten...
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc

source ~/.bashrc

ruby_check=$(rbenv versions | grep $BELOVED_RUBY_VERSION)

if [[ "$ruby_check" == *$BELOVED_RUBY_VERSION* ]]; then
  echo "$BELOVED_RUBY_VERSION is installed"
else
  rbenv install $BELOVED_RUBY_VERSION
fi

# assert_that "Ruby is installed and links to rbenv" "which ruby" "$HOME/.rbenv/shims/ruby"

rbenv global $BELOVED_RUBY_VERSION
rbenv rehash

# assert_that "Ruby version is now '${BELOVED_RUBY_VERSION}'" \
#             "ruby -v | grep -q ${BELOVED_RUBY_VERSION} && echo 'true'" "true"

# ubuntu/setup_nvm.sh

# NVM dependencies
sudo apt-get install build-essential libssl-dev

# git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`

#-------------------------------------------------------------------------------
# Install NVM (nvm_install.sh)
#-------------------------------------------------------------------------------

# install Node Version Manager
git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`

# load nvm command
source ~/.nvm/nvm.sh

# Install and use the latest version of Node
nvm install stable
# nvm use stable # Does this with install...

# Ensure we have the most recent version of npm
npm install npm -g

# Google Chrome.........The Browser
# HipChat...............The Chat Client
# Sublime Text 2........The Text Editor

# chrome
sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
sudo apt-get -y update
sudo apt-get -y install google-chrome-stable

# hipchat
# sudo sh -c 'echo "deb http://downloads.hipchat.com/linux/apt stable main" > /etc/apt/sources.list.d/atlassian-hipchat.list'
# wget -O - https://www.hipchat.com/keys/hipchat-linux.key | sudo apt-key add -
# sudo apt-get -y update
# sudo apt-get -y install hipchat

# sublime
sudo add-apt-repository -y ppa:webupd8team/sublime-text-2
sudo apt-get -y update
sudo apt-get -y install sublime-text

# zsh
# sudo apt-get -y install zsh

# flux
# sudo add-apt-repository -y ppa:kilian/f.lux
# sudo apt-get -y update
# sudo apt-get -y install fluxgui

# hub
git clone https://github.com/github/hub.git
cd hub
# TODO (phlco) permission problems... sudo chown -R `whoami` /usr/local/* ?
rake install prefix=/usr/local

# vim
sudo apt-get -y install vim

# emacs
# sudo apt-get -y install emacs

# open source object-relational database management system
# https://www.digitalocean.com/community/articles/how-to-install-and-use-postgresql-on-ubuntu-12-04
# TODO phlco set up user
# https://help.ubuntu.com/community/PostgreSQL
# sudo apt-get -y install postgresql-xc-client
# sudo apt-get -y install postgresql-client
# sudo apt-get -y install postgresql
# sudo apt-get -y install postgresql-contrib
# sudo apt-get -y install pg_ctl # initialize stop/start posgres
sudo apt-get -y install postgresql
sudo apt-get -y install postgresql-contrib
sudo apt-get -y install libpq-dev # should fix issue with installing pg gem

sudo -u postgres createuser --superuser $USER
# TODO phlco. taking out?
# sudo -u postgres psql
# create a history?
touch ~/.psql_history

createdb $USER

# Install ruby interface for Postgres
gem install pg
# create_student_folders.sh

inform "Creating directory for wdi: ~/code/wdi"

STUDENT_FOLDER="$HOME/code/wdi"
mkdir -p $STUDENT_FOLDER

SRC_DIR=~/.wdi/installfest
SETTINGS=$SRC_DIR/settings

dotfiles=($SETTINGS/dotfiles/*)

timestamp=$(date +%s)

mkdir -p $HOME/.wdi/backups_$timestamp

for filepath in "${dotfiles[@]}"; do

  dotfile=".$(basename $filepath)"

  if [[ -a "$HOME/$dotfile" ]]; then

    cp "$HOME/$dotfile" "$HOME/.wdi/backups_$timestamp/$dotfile"

  fi

  cp $filepath "$HOME/$dotfile"
done

# Don't ask questions
export DEBIAN_FRONTEND=noninteractive
sudo apt-get install -y mailutils

#-------------------------------------------------------------------------------
# We're done! (utils/fin.sh)
#-------------------------------------------------------------------------------

inform "We're done!"

echo ""
echo "Please quit and re-open your terminal!"
echo "#-- fin -- #"

# TODO(phlco) maybe make the welcome prompt load up additional checks to run.

